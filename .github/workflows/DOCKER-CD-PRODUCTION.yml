name: DOCKER-CD-PRODUCTION

on:
  push:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and Test with Gradle
        run: |
          chmod +x gradlew
          ./gradlew build
        shell: bash

      - name: Login to Docker Hub
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKER_LOGIN_ACCESSTOKEN }}

      - name: Build and push Docker image for Production
        run: |
          docker build --platform linux/amd64 -t terningpoint/terning2025 .
          docker push terningpoint/terning2025

  cd:
    needs: ci
    runs-on: ubuntu-24.04
    environment: production

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            # -- 변수 설정 --
            APP_NAME="terning2025-prod"
            IMAGE_NAME="terningpoint/terning2025"
            NGINX_CONFIG_PATH="/etc/nginx"
            SERVICE_URL_INC_PATH="${NGINX_CONFIG_PATH}/conf.d/service-url.inc"

            echo "### 1. 최신 Docker 이미지를 pull합니다."
            docker pull ${IMAGE_NAME}:latest

            echo "### 2. 현재 실행 중인 포트(Blue)와 새로 실행할 포트(Green)를 결정합니다."
            RUNNING_PORT=$(docker ps --filter "name=${APP_NAME}" --format "{{.Ports}}" | grep -o '[0-9]\{4\}->8080' | awk -F'->' '{print $1}')
            
            if [ "${RUNNING_PORT}" == "8080" ]; then
              NEW_PORT=8081
            else
              NEW_PORT=8080
            fi

            echo "   > 현재 서비스 포트(Blue): ${RUNNING_PORT:-없음}"
            echo "   > 새로 실행할 포트(Green): ${NEW_PORT}"

            echo "### 3. 새로운 버전의 애플리케이션(Green)을 실행합니다."
            docker run -d --name ${APP_NAME}-${NEW_PORT} --restart always \
              -p ${NEW_PORT}:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL='${{ secrets.DB_URL }}' \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e SPRING_JPA_DEFAULT_SCHEMA=${{ secrets.SPRING_JPA_DEFAULT_SCHEMA }} \
              -e JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}' \
              -e JWT_ACCESS_TOKEN_EXPIRED=${{ secrets.JWT_ACCESS_TOKEN_EXPIRED }} \
              -e JWT_REFRESH_TOKEN_EXPIRED=${{ secrets.JWT_REFRESH_TOKEN_EXPIRED }} \
              -e OPERATION_BASE_URL='${{ secrets.OPERATION_BASE_URL }}' \
              -e DISCORD_WEBHOOK_URL='${{ secrets.DISCORD_WEBHOOK_URL }}' \
              -e FIREBASE_SERVICE_KEY_JSON='${{ secrets.FIREBASE_SERVICE_KEY_JSON }}' \
              -e LOGGING_LOCATION=${{ secrets.LOGGING_LOCATION }} \
              -e TZ=Asia/Seoul \
              -v /home/ubuntu:/home/ubuntu/prod-logs \
              ${IMAGE_NAME}:latest

            echo "### 4. 헬스 체크를 시작합니다."
            sleep 10
            for retry_count in {1..10}; do
                echo "   > [${retry_count}/10] 서버 상태 체크 중..."
                response=$(curl -s http://localhost:${NEW_PORT}/actuator/health)
                up_count=$(echo "$response" | grep -c 'UP')

                if [ $up_count -ge 1 ]; then
                    echo "   > ✅ 서버 실행 성공 (포트: ${NEW_PORT})"
                    break
                fi
                if [ $retry_count -eq 10 ]; then
                    echo "   > ❌ 서버 헬스체크 실패. 배포를 중단하고 새 컨테이너를 종료합니다."
                    docker rm -f ${APP_NAME}-${NEW_PORT}
                    exit 1
                fi
                sleep 5
            done

            echo "### 5. Nginx 설정을 변경하여 트래픽을 새 포트(Green)로 전환합니다."
            echo "set \$service_url http://127.0.0.1:${NEW_PORT};" | sudo tee ${SERVICE_URL_INC_PATH}
            sudo nginx -s reload

            echo "### 6. 이전 버전의 컨테이너(Blue)를 종료 및 삭제합니다."
            if [ -n "${RUNNING_PORT}" ]; then
                docker rm -f ${APP_NAME}-${RUNNING_PORT}
            fi
            
            echo "### 7. 사용하지 않는 Docker 이미지를 정리합니다."
            docker image prune -af

            echo "✅ Production 배포가 성공적으로 완료되었습니다. 현재 서비스 포트: ${NEW_PORT}"
